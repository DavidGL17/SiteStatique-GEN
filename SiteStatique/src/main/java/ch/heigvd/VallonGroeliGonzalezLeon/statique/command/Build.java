package ch.heigvd.VallonGroeliGonzalezLeon.statique.command;


import ch.heigvd.VallonGroeliGonzalezLeon.statique.command.api.TemplateHTML;
import ch.heigvd.VallonGroeliGonzalezLeon.statique.util.Util;
import org.apache.commons.io.FileUtils;
import picocli.CommandLine;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.Callable;


@CommandLine.Command(name = "build", mixinStandardHelpOptions = true,
                     description = "Builds the site using the given markdown and json files. This command needs to be" +
                                   " executed at the root of the directory generated by the init command.\n" +
                                   "If there are any images that are in the same directory as the markdown and json " +
                                   "files, they will be copied to the corresponding build file.\n" +
                                   "If the config file, the layout file or the main md file are missing from their" +
                                   " normal location, the command will return 1 and delete the build directory\n" +
                                   "In case of an error while writing or reading the command will return 2\n" +
                                   "The program will also compile all md files in subdirectories of the current " +
                                   "directory. ")
public class Build implements Callable<Integer> {

   @Override
   public Integer call() {
      File currentDirectory;
      try {
         currentDirectory = new File(new File(".").getCanonicalPath());
      } catch (IOException e) {
         System.err.println("Error while reading current directory");
         e.printStackTrace();
         return 2;
      }
      File buildDirectory = new File(currentDirectory.getPath() + "\\build");
      if (buildDirectory.exists()) {
         try {
            FileUtils.deleteDirectory(buildDirectory);
         } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Build directory deletion failure.");
         }
      }
      buildDirectory.mkdir();

      File jsonFile = new File(currentDirectory.getPath() + "/config.json");
      if (!jsonFile.exists()) {
         System.err.println("Config file missing");
         return 1;
      }

      File layoutFile = new File(currentDirectory.getPath() + "/template/layout.html");
      if (!layoutFile.exists()) {
         System.err.println("Layout file missing");
         return 1;
      }

      File mdIndexFile = new File(currentDirectory.getPath() + "/index.md");
      if (!mdIndexFile.exists()) {
         System.err.println("Main md file missing");
         return 1;
      }
      TemplateHTML templateHTML;
      try {
         templateHTML = new TemplateHTML(layoutFile, jsonFile);
      } catch (IOException e) {
         System.err.println("Error while reading the layout and config file");
         return 2;
      }

      String indexContent;
      try {
         indexContent = templateHTML.generatePage(mdIndexFile);
      } catch (IOException e) {
         System.err.println("Error while reading the mdFile");
         return 2;
      }


      try {
         File indexHtmlFile = new File(buildDirectory.getPath() + "/index.html");
         Util.writeFile(indexContent, new BufferedWriter(
                 new OutputStreamWriter(new FileOutputStream(indexHtmlFile), StandardCharsets.UTF_8)));
         Util.copyImages(currentDirectory, buildDirectory);
      } catch (IOException e) {
         System.err.println("Error while writing the html file");
         return 2;
      }

      for (File f : currentDirectory.listFiles()) {
         if (f.isDirectory() && !f.getName().equals("build")) {
            File futurBuildDir = new File(buildDirectory.getPath() + "/" + f.getName());
            try {
               recursiveBuild(templateHTML, f, futurBuildDir);
            } catch (IOException e) {
               return 2;
            }
         }
      }

      return 0;
   }

   /**
    * Creates html files from md in subdirs, and translates all the images found
    * @param templateHTML
    * @param currentDir
    * @param currentBuildDir
    * @throws IOException
    */
   private void recursiveBuild(TemplateHTML templateHTML, File currentDir, File currentBuildDir) throws IOException {
      if (currentDir.listFiles() != null) {
         for (File f : currentDir.listFiles()) {
            if (f.getName().contains(".md")) {
               currentBuildDir.mkdir();
               String htmlContent;
               try {
                  htmlContent = templateHTML.generatePage(f);
               } catch (IOException e) {
                  System.err.println("Error while reading the mdFile");
                  throw e;
               }
               try {
                  String fileName = "/" + f.getName().replace(".md", "") + ".html";
                  File indexHtmlFile =
                          new File(currentBuildDir.getPath() + fileName);
                  Util.writeFile(htmlContent, new BufferedWriter(
                          new OutputStreamWriter(new FileOutputStream(indexHtmlFile), StandardCharsets.UTF_8)));
               } catch (IOException e) {
                  System.err.println("Error while writing the html file");
                  throw e;
               }
            }
         }
         Util.copyImages(currentDir,currentBuildDir);
         for (File f : currentDir.listFiles()) {
            if (f.isDirectory() && !f.getName().equals("build")) {
               File futurBuildDir = new File(currentBuildDir.getPath() + "/" + f.getName());
               recursiveBuild(templateHTML, f, futurBuildDir);
            }
         }
      }
   }


}